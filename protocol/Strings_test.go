package protocol

import (
	"testing"

	"github.com/stretchr/testify/suite"
)

type Protocol_StringTestSuite struct {
	suite.Suite
}

func (t Protocol_StringTestSuite) TestProtocol_CLen() {
	input := []byte{
		// The quick brown fox jumps over the lazy dog.<0x00>
		0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6B, 0x20, 0x62, 0x72, 0x6F, 0x77, 0x6E, 0x20,
		0x66, 0x6F, 0x78, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x73, 0x20, 0x6F, 0x76, 0x65, 0x72, 0x20, 0x74,
		0x68, 0x65, 0x20, 0x6C, 0x61, 0x7A, 0x79, 0x20, 0x64, 0x6F, 0x67, 0x2E, 0x00,
	}
	length := Clen(input)
	t.Assert().Equal(44, length)
}

func (t Protocol_StringTestSuite) TestProtocol_CLen_NullByte() {
	input := []byte{0x00}
	length := Clen(input)
	t.Assert().Equal(0, length)
}

func (t Protocol_StringTestSuite) TestProtocol_CLen_Empty() {
	input := []byte{}
	length := Clen(input)
	t.Assert().Equal(0, length)
}

func (t Protocol_StringTestSuite) TestProtocol_ReadCString() {
	question := []byte{
		// The quick brown fox jumps over the lazy dog.<0x00>
		0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6B, 0x20, 0x62, 0x72, 0x6F, 0x77, 0x6E, 0x20,
		0x66, 0x6F, 0x78, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x73, 0x20, 0x6F, 0x76, 0x65, 0x72, 0x20, 0x74,
		0x68, 0x65, 0x20, 0x6C, 0x61, 0x7A, 0x79, 0x20, 0x64, 0x6F, 0x67, 0x2E, 0x00,
	}
	response := "The quick brown fox jumps over the lazy dog."
	str := ReadCString(question)
	t.Assert().Equal(response, str)
}

func (t Protocol_StringTestSuite) TestProtocol_ReadCString_WithExtraBytes() {
	question := []byte{
		// The quick brown fox jumps over the lazy dog.<0x00><0x01><0x02><0x03>
		0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6B, 0x20, 0x62, 0x72, 0x6F, 0x77, 0x6E, 0x20,
		0x66, 0x6F, 0x78, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x73, 0x20, 0x6F, 0x76, 0x65, 0x72, 0x20, 0x74,
		0x68, 0x65, 0x20, 0x6C, 0x61, 0x7A, 0x79, 0x20, 0x64, 0x6F, 0x67, 0x2E, 0x00, 0x01, 0x02, 0x03,
	}
	response := "The quick brown fox jumps over the lazy dog."
	str := ReadCString(question)
	t.Assert().Equal(response, str)
}

func (t Protocol_StringTestSuite) TestProtocol_ReadCString_NullByte() {
	question := []byte{0x00}
	str := ReadCString(question)
	t.Assert().Equal("", str)
}

func (t Protocol_StringTestSuite) TestProtocol_ReadCString_Empty() {
	var question []byte
	str := ReadCString(question)
	t.Assert().Equal("", str)
}

func (t Protocol_StringTestSuite) TestProtocol_WriteCString() {
	question := "The quick brown fox jumps over the lazy dog."
	response := []byte{
		// The quick brown fox jumps over the lazy dog.<0x00>
		0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6B, 0x20, 0x62, 0x72, 0x6F, 0x77, 0x6E, 0x20,
		0x66, 0x6F, 0x78, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x73, 0x20, 0x6F, 0x76, 0x65, 0x72, 0x20, 0x74,
		0x68, 0x65, 0x20, 0x6C, 0x61, 0x7A, 0x79, 0x20, 0x64, 0x6F, 0x67, 0x2E, 0x00,
	}
	output := WriteCString(question)

	t.Assert().Equal(response, output)
}

func (t Protocol_StringTestSuite) TestProtocol_WriteCString_NullByte() {
	question := "\x00"
	response := []byte{0x00, 0x00}
	output := WriteCString(question)

	t.Assert().Equal(response, output)
}

func (t Protocol_StringTestSuite) TestProtocol_WriteCString_Empty() {
	question := ""
	response := []byte{0x00}
	output := WriteCString(question)

	t.Assert().Equal(response, output)
}

func (t Protocol_StringTestSuite) TestProtocol_ReadPascalString() {
	question := []byte{
		// <0x2C>The quick brown fox jumps over the lazy dog.
		0x2C, 0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6B, 0x20, 0x62, 0x72, 0x6F, 0x77, 0x6E,
		0x20, 0x66, 0x6F, 0x78, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x73, 0x20, 0x6F, 0x76, 0x65, 0x72, 0x20,
		0x74, 0x68, 0x65, 0x20, 0x6C, 0x61, 0x7A, 0x79, 0x20, 0x64, 0x6F, 0x67, 0x2E,
	}
	response := "The quick brown fox jumps over the lazy dog."

	output := ReadPascalString(question)
	t.Assert().Equal(response, output)
}

func (t Protocol_StringTestSuite) TestProtocol_ReadPascalString_WithExtraData() {
	question := []byte{
		// <0x2C>The quick brown fox jumps over the lazy dog.<0x01><0x02><0x03>
		0x2C, 0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6B, 0x20, 0x62, 0x72, 0x6F, 0x77, 0x6E,
		0x20, 0x66, 0x6F, 0x78, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x73, 0x20, 0x6F, 0x76, 0x65, 0x72, 0x20,
		0x74, 0x68, 0x65, 0x20, 0x6C, 0x61, 0x7A, 0x79, 0x20, 0x64, 0x6F, 0x67, 0x2E, 0x01, 0x02, 0x03,
	}
	response := "The quick brown fox jumps over the lazy dog."

	output := ReadPascalString(question)
	t.Assert().Equal(response, output)
}

func (t Protocol_StringTestSuite) TestProtocol_ReadPascalStringStream_WithRemainder() {
	question := []byte{
		// <0x2C>The quick brown fox jumps over the lazy dog.<0x01><0x02><0x03>
		0x2C, 0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6B, 0x20, 0x62, 0x72, 0x6F, 0x77, 0x6E,
		0x20, 0x66, 0x6F, 0x78, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x73, 0x20, 0x6F, 0x76, 0x65, 0x72, 0x20,
		0x74, 0x68, 0x65, 0x20, 0x6C, 0x61, 0x7A, 0x79, 0x20, 0x64, 0x6F, 0x67, 0x2E, 0x01, 0x02, 0x03,
	}
	response := "The quick brown fox jumps over the lazy dog."
	remainder := []byte{0x01, 0x02, 0x03}

	output, remainder_output := ReadPascalStringStream(question)
	t.Assert().Equal(response, output)
	t.Assert().Equal(remainder, remainder_output)
}

func (t Protocol_StringTestSuite) TestProtocol_ReadPascalStringStream_WithoutRemainder() {
	question := []byte{
		// <0x2C>The quick brown fox jumps over the lazy dog.
		0x2C, 0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6B, 0x20, 0x62, 0x72, 0x6F, 0x77, 0x6E,
		0x20, 0x66, 0x6F, 0x78, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x73, 0x20, 0x6F, 0x76, 0x65, 0x72, 0x20,
		0x74, 0x68, 0x65, 0x20, 0x6C, 0x61, 0x7A, 0x79, 0x20, 0x64, 0x6F, 0x67, 0x2E,
	}
	response := "The quick brown fox jumps over the lazy dog."
	remainder := []byte{}

	output, remainder_output := ReadPascalStringStream(question)
	t.Assert().Equal(response, output)
	t.Assert().Equal(remainder, remainder_output)
}

func (t Protocol_StringTestSuite) TestProtocol_ReadPascalStringStream_NullByte() {
	var (
		question  = []byte{0x00}
		remainder = []byte{}
		response  = ""
	)

	output, remainder_output := ReadPascalStringStream(question)
	t.Assert().Equal(response, output)
	t.Assert().Equal(remainder, remainder_output)
}

func (t Protocol_StringTestSuite) TestProtocol_ReadPascalStringStream_Empty() {
	var (
		question  []byte
		remainder []byte
		response  = ""
	)

	output, remainder_output := ReadPascalStringStream(question)
	t.Assert().Equal(response, output)
	t.Assert().Equal(remainder, remainder_output)
}

func (t Protocol_StringTestSuite) TestProtocol_WritePascalString() {
	question := "The quick brown fox jumps over the lazy dog."
	response := []byte{
		// <0x2C>The quick brown fox jumps over the lazy dog.
		0x2C, 0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6B, 0x20, 0x62, 0x72, 0x6F, 0x77, 0x6E,
		0x20, 0x66, 0x6F, 0x78, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x73, 0x20, 0x6F, 0x76, 0x65, 0x72, 0x20,
		0x74, 0x68, 0x65, 0x20, 0x6C, 0x61, 0x7A, 0x79, 0x20, 0x64, 0x6F, 0x67, 0x2E,
	}

	output, err := WritePascalString(question)
	t.Assert().Nil(err)
	t.Assert().Equal(output, response)
}

func (t Protocol_StringTestSuite) TestProtocol_WriteLongPascalString_error() {
	question := "The quick brown fox jumps over the lazy dog.The quick brown fox jumps over the lazy dog.The quick brown fox jumps over the lazy dog.The quick brown fox jumps over the lazy dog.The quick brown fox jumps over the lazy dog.The quick brown fox jumps over the lazy dog."
	response_err := ErrorPascalStringTooLong

	output, err := WritePascalString(question)
	t.Assert().ErrorIs(err, response_err)
	t.Assert().Equal(output, []byte{})
}

func TestStringTestSuite(t *testing.T) {
	suite.Run(t, new(Protocol_StringTestSuite))
}
